#!/bin/bash

echo "====== Starting All Four DARIA Required Services ======"
BASE_DIR=$(pwd)
echo "Base directory: $BASE_DIR"

# Stop any existing processes
echo "Stopping any existing processes..."
pkill -f "python" 2>/dev/null || true
lsof -ti:5025 | xargs kill -9 2>/dev/null || true
lsof -ti:5015 | xargs kill -9 2>/dev/null || true
lsof -ti:5016 | xargs kill -9 2>/dev/null || true
lsof -ti:5030 | xargs kill -9 2>/dev/null || true
sleep 3

# Create necessary directories
echo "Setting up directories..."
mkdir -p data/interviews/sessions
mkdir -p logs
mkdir -p static
mkdir -p templates

# Create mock services
echo "Creating mock TTS service..."
cat > mock_tts_service.py << 'EOF'
#!/usr/bin/env python3
"""Mock TTS service for DARIA"""

import os
import time
from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/health', methods=['GET'])
def health():
    """Health check endpoint"""
    return jsonify({"status": "ok"})

@app.route('/synthesize', methods=['POST'])
def synthesize():
    """Mock synthesis endpoint"""
    data = request.json
    text = data.get('text', '')
    voice_id = data.get('voice_id', 'default')
    
    # Return a mock audio URL
    return jsonify({
        "status": "success",
        "audio_url": f"mock_audio_{int(time.time())}.mp3",
        "text": text,
        "voice_id": voice_id
    })

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5015))
    app.run(host='0.0.0.0', port=port)
EOF

echo "Creating mock STT service..."
cat > mock_stt_service.py << 'EOF'
#!/usr/bin/env python3
"""Mock STT service for DARIA"""

import os
import time
from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/health', methods=['GET'])
def health():
    """Health check endpoint"""
    return jsonify({"status": "ok"})

@app.route('/transcribe', methods=['POST'])
def transcribe():
    """Mock transcribe endpoint"""
    # Return a mock transcript
    return jsonify({
        "status": "success",
        "transcript": "This is a mock transcript generated by the STT service.",
        "confidence": 0.95
    })

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5016))
    app.run(host='0.0.0.0', port=port)
EOF

echo "Creating mock Memory Companion service..."
cat > mock_memory_service.py << 'EOF'
#!/usr/bin/env python3
"""Mock Memory Companion service for DARIA"""

import os
import time
from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/health', methods=['GET'])
def health():
    """Health check endpoint"""
    return jsonify({"status": "ok"})

@app.route('/api/memory', methods=['GET'])
def get_memory():
    """Mock memory retrieval endpoint"""
    return jsonify({
        "status": "success",
        "memories": [
            {"id": "1", "content": "Mock memory 1", "timestamp": time.time()},
            {"id": "2", "content": "Mock memory 2", "timestamp": time.time()},
        ]
    })

@app.route('/api/memory', methods=['POST'])
def store_memory():
    """Mock memory storage endpoint"""
    return jsonify({
        "status": "success",
        "message": "Memory stored successfully"
    })

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5030))
    app.run(host='0.0.0.0', port=port)
EOF

# Make files executable
chmod +x mock_tts_service.py
chmod +x mock_stt_service.py
chmod +x mock_memory_service.py
chmod +x run_daria_simplified.py

# Start the services
echo "Starting all four required DARIA services..."

# 1. Start TTS service (port 5015)
echo "Starting TTS service on port 5015..."
python mock_tts_service.py > logs/tts.log 2>&1 &
TTS_PID=$!
echo "TTS service started with PID: $TTS_PID"

# 2. Start STT service (port 5016)
echo "Starting STT service on port 5016..."
python mock_stt_service.py > logs/stt.log 2>&1 &
STT_PID=$!
echo "STT service started with PID: $STT_PID"

# 3. Start Memory Companion service (port 5030)
echo "Starting Memory Companion service on port 5030..."
python mock_memory_service.py > logs/memory.log 2>&1 &
MEMORY_PID=$!
echo "Memory Companion service started with PID: $MEMORY_PID"

# Wait for services to initialize
echo "Waiting for services to initialize..."
sleep 5

# 4. Start main DARIA API (port 5025)
echo "Starting main DARIA API on port 5025..."
python run_daria_simplified.py --port 5025 > logs/daria.log 2>&1 &
DARIA_PID=$!
echo "DARIA started with PID: $DARIA_PID"

# Wait for DARIA to initialize
echo "Waiting for DARIA to initialize..."
sleep 5

# Check services
echo "Checking all services..."

# Check main DARIA service
if curl -s "http://localhost:5025/api/health" > /dev/null; then
    echo "‚úÖ DARIA API service is running successfully!"
    DARIA_RUNNING=true
else
    echo "‚ùå DARIA API service failed to start. Check logs/daria.log for errors."
    DARIA_RUNNING=false
fi

# Check TTS service
if curl -s "http://localhost:5015/health" > /dev/null; then
    echo "‚úÖ TTS service is running successfully!"
    TTS_RUNNING=true
else
    echo "‚ùå TTS service failed to start. Check logs/tts.log for errors."
    TTS_RUNNING=false
fi

# Check STT service
if curl -s "http://localhost:5016/health" > /dev/null; then
    echo "‚úÖ STT service is running successfully!"
    STT_RUNNING=true
else
    echo "‚ùå STT service failed to start. Check logs/stt.log for errors."
    STT_RUNNING=false
fi

# Check Memory Companion service
if curl -s "http://localhost:5030/health" > /dev/null; then
    echo "‚úÖ Memory Companion service is running successfully!"
    MEMORY_RUNNING=true
else
    echo "‚ùå Memory Companion service failed to start. Check logs/memory.log for errors."
    MEMORY_RUNNING=false
fi

echo ""
echo "====== DARIA Services Status ======="
echo "üì± DARIA API (port 5025): ${DARIA_RUNNING}"
echo "üîä TTS Service (port 5015): ${TTS_RUNNING}"
echo "üé§ STT Service (port 5016): ${STT_RUNNING}"
echo "üß† Memory Service (port 5030): ${MEMORY_RUNNING}"
echo ""

if [ "$DARIA_RUNNING" = true ] && [ "$TTS_RUNNING" = true ] && [ "$STT_RUNNING" = true ] && [ "$MEMORY_RUNNING" = true ]; then
    echo "‚úÖ All four required services are running successfully!"
    echo ""
    echo "üìä Main application: http://localhost:5025/"
    echo "üìù API health check: http://localhost:5025/api/health"
else
    echo "‚ùå Some services failed to start. Please check the logs for more information."
fi

echo ""
echo "Press Ctrl+C to stop all services when done."
echo "To view logs, use: tail -f logs/daria.log"

# Keep the script running
wait $DARIA_PID 